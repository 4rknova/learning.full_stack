package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"log"
	"server/graph/model"
	"server/internal/tasks"
	"strconv"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.NewTask) (*model.Task, error) {
	var task tasks.Task

	log.Print("Creating new task: ", input, "..")

	task.Text = input.Text
	task.IsDone = false

	TaskID := task.Save()

	log.Print("Created new task with ID: ", TaskID)

	return &model.Task{ID: strconv.FormatInt(TaskID, 10), Text: task.Text, IsDone: task.IsDone}, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdatedTask) (*model.Result, error) {
	log.Print("Updating task :", input.ID, " = ", input.IsDone, "..")

	var task tasks.Task
	task.ID = input.ID
	task.IsDone = input.IsDone

	result := task.Update()

	return &model.Result{IsSuccessful: result}, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, input string) (*model.Result, error) {
	log.Print("Deleting task :", input, "..")

	var task tasks.Task
	task.ID = input

	result := task.Delete()

	return &model.Result{IsSuccessful: result}, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	log.Print("Fetching all tasks..")
	var resultTasks []*model.Task
	var dbTasks []tasks.Task
	dbTasks = tasks.GetAll()
	for _, task := range dbTasks {
		resultTasks = append(resultTasks, &model.Task{ID: task.ID, Text: task.Text, IsDone: task.IsDone})
	}
	return resultTasks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
